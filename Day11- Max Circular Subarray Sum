class Solution {
    public int circularSubarraySum(int arr[]) {
        int n = arr.length;
        int maxKadane = kadane(arr);
        int totalSum = 0;
        for (int i = 0; i < n; i++) {
            totalSum += arr[i];
            arr[i] = -arr[i];
        }
        int maxInvertedKadane = kadane(arr);
        for (int i = 0; i < n; i++) {
            arr[i] = -arr[i];
        }
        int maxCircular = totalSum + maxInvertedKadane;
        if (maxCircular == 0) {
            return maxKadane;
        }
        return Math.max(maxKadane, maxCircular);
    }

    private int kadane(int[] arr) {
        int maxSoFar = arr[0];
        int maxEndingHere = arr[0];
        for (int i = 1; i < arr.length; i++) {
            maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
        return maxSoFar;
    }
}
